About the <Simulation engine> in SIMILAR

	In SIMILAR, the notion of <<simulation model>> is separated from the notion of <<simulation engine>> to separate the declarative knowledge of the simulation from the procedural knowledge of the simulation.
	
	* A <<simulation model>> assembles the simulation-case specific knowledge. It contains the definition of the levels, the agents, the natural action of the environment and the reaction of each level. This knowledge is domain specific.

	* A <<simulation engine>> assembles the execution-related information of a simulation. It defines how time moves, when to ask the agents to perceive, memorize or decide, when the environment produces its natural action or when the reaction is performed. It is also responsible for the observation and the exporting of the simulation data and responsible for the reaction to the so called {{{./architecture-system.html}<<system influences>>}}.
		
	[]

	The separation between <model> and <engine> facilitates the optimization of simulations, by using the most appropriate execution mode depending on the simulation: a simulation engine can be implemented using different inner mechanisms to manage the execution of a simulation. For instance:
	
	* Performing all the operations in sequence;
	
	* Performing the operations (when it is possible) in parallel using threads;
	
	* Performing the operations (when it is possible) in parallel using threads and GPGPU;
	
	[]
	
* Roles of the simulation engine

	The simulation engine has different roles in the simulation:
	
	* Move the simulation through time and call when it is appropriate:
	
		* The perception, memorization, decision phases of the agents;
		
		* The natural phase of the environment;
		
		* The reaction phase of the levels;
	
	* Ensure that the time-related constraints of the model remain valid during the whole execution of the simulation. {{{../pdf/morvan10irm4mls.pdf}<<This paper>>}} describes the time constraints that the perception, memorization, natural, decision and reaction phases of the simulation have to verify;
	
	* Ensure that the observation probes are updated appropriately (see {{{./architecture-probe.html}<<this page>>}});
	
	* Provide a reaction to the system influences of any simulation (see {{{./architecture-system.html}<<this page>>}}).