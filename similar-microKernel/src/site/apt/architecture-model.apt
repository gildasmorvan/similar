About the <Simulation model> in SIMILAR

	In SIMILAR, the notion of <<simulation model>> is separated from the notion of <<simulation engine>> to separate the 
	declarative knowledge of the simulation from the procedural knowledge of the simulation.
	
	* A <<simulation model>> assembles the simulation-case specific knowledge. 
	It contains the definition of the levels, the agents, the natural action of the environment and the reaction of each level. 
	This knowledge is domain specific.

	* A <<simulation engine>> assembles the execution-related information of a simulation. 
	It defines how time moves, when to ask the agents to perceive, memorize or decide, when the environment produces 
	its natural action or when the reaction is performed. It is also responsible for the observation and the 
	exporting of the simulation data and responsible for the reaction to the so-called {{{./architecture-system.html}<<system influences>>}}.
		
	[]

	The separation between <model> and <engine> facilitates the specification of simulations, since the execution mechanisms of the 
	behavior of agents, of the natural action of the environment and the reaction of the levels are managed automatically.
	
* Roles of the simulation model

	The simulation model has different roles in a simulation:
	
	* Define the initial setting of the simulation:
	
		* Define the levels of the simulation and the perception/influence relation graphs;
		
		* Define the environment of the simulation, the initial public local state of the environment in the 
		levels of the simulation and the natural action of the environment from each level.
		
		* Define the initial agents of the simulation;
		
	* Define the influences that can be sent to each level of the simulation;
		
	* Define the environment of the simulation:
	
		* Define the natural action process of the environment from the various levels of the simulation, <i.e.> 
		the influences produced by the environment during its natural action from each specific level.
			
	* Define the agents of the simulation:
		
		* Define the category (<i.e.> class, type, nature, <etc.>) of the agent;
		
		* Define the initial global memory state of the agent;
		
		* Define the initial public local state of the agent in the levels where it lies;
		
		* Define the data perceived by the agent for each of the level it is lying in;
		
		* Define the perception process from a level of the agent, <i.e.> the process interpreting the 
		current public local dynamic state of the levels and using these information to
		build the data perceived by the agent;
		
		* Define the memory revision process of the agent, <i.e.> the process using the former value of the global 
		memory state of the agent and the lastly perceived data to build the new value of the global memory state of 
		the agent.
		
		* Define the decision process of the agent, <i.e.> the process using the global memory state and the perceived 
		data to produce influences into the influenceable levels.
		
	* Define the reaction process of the levels of the simulation, <i.e.> how the environment modifies its public local
	state according to the modification requests depicted by the influences it received up until the beginning of the 
	reaction process:
	
		* Specify a user-defined reaction to the system influences that were managed by the simulation engine. This phase 
		is important since some levels might require specific operations after a system reaction. For instance, adding the public
		local state of a newly added vehicle agent into the infrastructure of the road network stored in the public local state of 
		the environment;
		
		* Specify a user-defined reaction to the regular influences that were sent to this level. This phase also tells which influence
		persist after the reaction (it models an action that has not finished yet).